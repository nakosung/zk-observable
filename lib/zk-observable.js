// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(env) {
    var ZK, addr, dict, o, port, proto, sync, test, test2, zk, zookeeper, _ref;
    if (env == null) {
      env = process.env;
    }
    o = require('observable');
    ZK = {
      ADDRESS: env.ZK_ADDRESS || 'localhost',
      PORT: env.ZK_PORT || 2181
    };
    _ref = env.ZK_PORT.split(':'), proto = _ref[0], addr = _ref[1], port = _ref[2];
    if (port != null) {
      ZK.ADDRESS = addr.substr(2);
      ZK.PORT = port;
    }
    zookeeper = require('node-zookeeper-client');
    test = o();
    test2 = o();
    dict = o({});
    sync = function() {
      var client;
      client = zookeeper.createClient("" + ZK.ADDRESS + ":" + ZK.PORT);
      client.once('connected', function() {
        var bye, setup;
        client.once('disconnected', sync);
        setup = function() {
          var byes, k, killed, v, _fn, _ref1;
          killed = false;
          byes = [];
          _ref1 = dict();
          _fn = function(k, v) {
            var encoding, fetch, reading, _ref2;
            _ref2 = v, v = _ref2.v, encoding = _ref2.encoding;
            if (/\/$/.test(k)) {
              if (k !== '/') {
                k = k.substr(0, k.length - 1);
              }
              fetch = function() {
                var watcher;
                if (killed) {
                  return;
                }
                watcher = function(event) {
                  return fetch();
                };
                console.log('fetching ', k);
                return client.getChildren(k, watcher, function(err, children, stat) {
                  if (!err) {
                    return v(children);
                  }
                });
              };
              return fetch();
            } else {
              reading = false;
              byes.push(v(function(x) {
                if (reading) {
                  return;
                }
                if (x == null) {
                  return;
                }
                console.log('writing ', k);
                if (!(x instanceof Buffer)) {
                  x = new Buffer(x);
                }
                return client.setData(k, x, function(err) {
                  var spew;
                  if (!err) {
                    return;
                  }
                  spew = function(err) {
                    return console.log(err);
                  };
                  if ((err != null ? err.code : void 0) === -101) {
                    return client.mkdirp(k, function(err) {
                      if (err) {
                        return spew(err);
                      }
                      return client.setData(k, x, function(err) {
                        if (err) {
                          return spew(err);
                        }
                      });
                    });
                  } else {
                    return spew(err);
                  }
                });
              }));
              fetch = function() {
                var watcher;
                if (killed) {
                  return;
                }
                watcher = function(event) {
                  return fetch();
                };
                console.log('fetching ', k);
                return client.getData(k, watcher, function(err, data, stat) {
                  reading = true;
                  if (!err) {
                    if (encoding != null) {
                      data = data.toString(encoding);
                    }
                    v(data);
                  }
                  return reading = false;
                });
              };
              return fetch();
            }
          };
          for (k in _ref1) {
            v = _ref1[k];
            _fn(k, v);
          }
          return function() {
            killed = true;
            return byes.forEach(function(x) {
              return x();
            });
          };
        };
        bye = void 0;
        dict(function() {
          if (typeof bye === "function") {
            bye();
          }
          return bye = setup();
        });
        return client.once('disconnected', function() {
          return typeof bye === "function" ? bye() : void 0;
        });
      });
      return client.connect();
    };
    sync();
    zk = function(path, encoding) {
      var d, value;
      if (encoding == null) {
        encoding = 'utf-8';
      }
      d = dict();
      if (d[path]) {
        return d[path].v;
      } else {
        value = o();
        d[path] = {
          v: value,
          encoding: encoding
        };
        dict(d);
        return value;
      }
    };
    zk.off = function(path) {
      var d;
      d = dict();
      delete d[path];
      return dict(d);
    };
    return zk;
  };

}).call(this);
